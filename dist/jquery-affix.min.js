(function($){$.affix={defaults:{offsetTop:0,breakpoint:null}};let resizeObserver=null;$.fn.affix=function(options){if($(this).length>1){return $(this).each(function(i,e){return $(e).affix(options)})}const $element=$(this);if(!$element.data("affixInitialized")){let settings;settings=$.extend(true,{},$.affix.defaults,options||{},Object.keys($element.data()).reduce((result,key)=>{if(key.startsWith("affix")){const optionKey=key.replace(/^affix/,"").replace(/^[A-Z]/,match=>match.toLowerCase());result[optionKey]=$element.data(key)}return result},{}));$element.data("settings",settings);$element.addClass("affix");saveOriginalStyles($element);if(!resizeObserver){resizeObserver=new ResizeObserver(()=>setOffsetTop());resizeObserver.observe(document.documentElement);$(window).on("scroll",function(){setOffsetTop()})}setOffsetTop();$element.data("affixInitialized",true);$element.trigger("init")}function isBreakpointActive(bp){const breakpoints={sm:576,md:768,lg:992,xl:1200,xxl:1400};const currentWidth=window.innerWidth;if(typeof bp==="number"||!isNaN(bp)){return currentWidth>=bp}return breakpoints[bp]?currentWidth>=breakpoints[bp]:true}function saveOriginalStyles($el){const originalStyles={position:$el.css("position"),top:$el.css("top"),zIndex:$el.css("zIndex")};$el.data("originalStyles",originalStyles)}function setUnSticky($el){const originalValues=$el.data("originalStyles")||{};$el.css(originalValues).removeClass("affixed");$el.trigger("unaffixed")}function setOffsetTop(){const $affixElements=$(".affix");$affixElements.each(function(index,el){const $currentElement=$(el);const currentElementSettings=$currentElement.data("settings");if(currentElementSettings.breakpoint&&!isBreakpointActive(currentElementSettings.breakpoint)){setUnSticky($currentElement);return}let topOffset=0;const currentLeft=$currentElement.offset().left;const currentRight=currentLeft+$currentElement.outerWidth();for(let i=0;i<index;i++){const $previousElement=$($affixElements[i]);const previousLeft=$previousElement.offset().left;const previousRight=previousLeft+$previousElement.outerWidth();const isOverlappingX=currentRight>previousLeft&&currentLeft<previousRight;if(isOverlappingX){topOffset=Math.max(topOffset,$previousElement.data("offsetTop")+$previousElement.outerHeight())}}topOffset+=currentElementSettings.offsetTop||0;$currentElement.data("offsetTop",topOffset);$currentElement.css({position:"sticky",top:`${topOffset}px`,zIndex:1e3-index});if(isElementSticky($currentElement)){if(!$currentElement.hasClass("affixed")){$currentElement.trigger("affixed");$currentElement.addClass("affixed")}}else{if($currentElement.hasClass("affixed")){$currentElement.trigger("unaffixed");$currentElement.removeClass("affixed")}}})}function isElementSticky($element){const elementOffset=$element.offset().top;const scrollTop=$(window).scrollTop();const stickyStart=$element.data("offsetTop")||parseInt($element.css("top"))||0;return scrollTop>=parseInt(elementOffset-stickyStart)}return this}})(jQuery);